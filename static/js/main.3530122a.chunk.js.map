{"version":3,"sources":["Components/399772.jpg","Components/Card.js","Containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","_ref","letterProp","faceProp","selectProp","map","letter","i","j","react_default","a","createElement","id","concat","includes","className","key","src","require","alt","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","imageSelection","event","selected","state","select","target","setState","console","log","handleClick","clicked","face","targetChar","charAt","selectChar","listLetters","found","letters","Math","floor","random","randomOddLetters","arr","x","length","shuffle","slice","_this$state","onClick","src_Components_Card","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3530122a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/399772.f94adddf.jpg\";","import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ({ letterProp, faceProp, selectProp}) => {\r\n\treturn(\r\n\t\tletterProp.map((letter,i,j) =>{\r\n\t\t\treturn(\r\n\t\t\t\t<img id={`${selectProp.includes(letter) & (faceProp)?'face':''}`} \r\n\t\t\t\tclassName={letter} key={i} src={require('./399772.jpg')} alt='Silhouette'\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\t})\r\n\t);\r\n}\r\n\r\nexport default Card;\r\n//${selectProp==={letter} & faceProp?'face':''}","import React, { Component } from 'react';\nimport './App.css';\nimport Card from '../Components/Card';\n\nclass App extends Component {\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tlistLetters:[],\n\t\t\tselect:[],\n\t\t\tfound:[],\n\t\t\tface:false,\n\t\t\tclicked:0\n\t\t}\n\t}\n\n\timageSelection = (event) => {\n\t\tlet selected= this.state.select.concat(event.target.className);\n\t\tthis.setState({ select: selected });\n\t\tconsole.log(event.target.className);\n\t}\n\n\thandleClick = (event) => {\n\t\tthis.setState({ clicked: this.state.clicked +1 })\n\n\t\tif (this.state.clicked <1 ){\n\t\tthis.imageSelection(event);\n\t\tthis.setState({ face: !this.state.face });\n\t\t}\n\n\t\tconst targetChar = event.target.className.charAt(0);\n\t\tconst selectChar = this.state.select.map(letter => letter.charAt(0));\n\n\t\tif (this.state.clicked >=1 && this.state.select.includes(event.target.className)){\n\t\tthis.setState({ clicked: this.state.clicked })\n\t\t}\t\t\n\t\t\telse if (this.state.clicked >= 1 && selectChar.includes(targetChar)){\n\t\t\t\tconsole.log('SAME');\n\t\t\t\tthis.imageSelection(event);\n\t\t\t\tthis.setState({ face: true });\n\t\t\t}\t\t\t\t\t\n\t\t\telse if (this.state.clicked >= 1 && !selectChar.includes(targetChar)){\n\t\t\t\tconsole.log('NOT SAME');\n\t\t\t\tthis.imageSelection(event);\n\t\t\t\tthis.setState({ face: true });\n\t\t\t}\n\t\tif(this.state.clicked === 2){\n\t\t\tthis.setState({ clicked: 0});\n\t\t\tthis.setState({ face: !this.state.face });\n\t\t\tthis.setState({ select: [] });\n\t\t}\n\t}\n\n\tcomponentWillMount(){\n\t//Preparing the list of letters (Shuffle + Random)\n\t\tfunction shuffle(arr){\n\t  \t\tlet i,j,x;\n\t  \t\tfor (i =arr.length-1; i>0; i--){\n\t  \t\t\tj = Math.floor(Math.random()*(i+1));\n\t  \t\t\tx =arr[i];\n\t  \t\t\tarr[i] = arr[j];\n\t  \t\t\tarr[j] = x;\n\t  \t\t}\n  \t\t\treturn arr;\n  \t\t}\n\t\tconst letters = ['A','A2','B','B2','C','C2','D','D2','E','E2','F','F2','G','G2','H','H2','I','I2','J','J2','K','K2'];\n\t  \tconst i = Math.floor(Math.random()*11);\n\t  \tconst oddLetters = letters.slice(0,i).concat(letters.slice(i+1, letters.length));\n  \t\tconst randomOddLetters = shuffle(oddLetters);\n  \t\n  \t\tthis.setState({ listLetters:randomOddLetters });\n  \t}\n  \t////////////////////////////////////////////////////////\n\n\trender() {\n\t\tconst { listLetters, face, select } = this.state;\n\t\treturn (\n\t\t    <div className = 'body'>\n\t\t      <div className=\"App\">\n\t\t        <h1>PI</h1>\n\t\t        <h2 >Puzzle Investigator</h2>\n\t\t        <br />\n\t\t        <div className='container' onClick={this.handleClick}>\n\t\t        <Card letterProp={listLetters} faceProp={face} selectProp={select}/> \n\t\t        </div>\n\t\t      </div>\n\t\t    </div>\n\t    );\n\t}\n\n}\n\nexport default App;\n\n\n/*at render page:\ndelete random card --- DONE\n\nwhen first card clicked: ---DONE\n\t-change image --- DONE\nwhen second card clicked \n\t- change image\n\nif className first card = className second card then:\n-border green\n- msg (validation)\n\notherwise \ntimer 3s then change both image back\n\nwhen only K left + k clicked\n- win message*/\n\n/* \n\t1/click on 1 image\n\t2/click on 2nd image\n\t3/ if image1 === image2 then set id to face permanently\n\t-otherwise timer 3 s to face false all + select ''\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}