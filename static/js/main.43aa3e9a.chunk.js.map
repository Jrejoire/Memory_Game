{"version":3,"sources":["Components/399772.jpg","Components/Card.js","Containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","_ref","letterProp","faceProp","selectProp","foundProp","map","letter","i","j","react_default","a","createElement","id","concat","includes","className","key","src","require","alt","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","imageSelection","event","selected","state","select","target","setState","console","log","timeout","time","handleClick","clicked","face","targetChar","charAt","selectChar","pairFound","found","listLetters","letters","Math","floor","random","randomOddLetters","arr","x","length","shuffle","slice","_this$state","onClick","src_Components_Card","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43aa3e9a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/399772.f94adddf.jpg\";","import React from 'react';\nimport './Card.css';\n\nconst Card = ({ letterProp, faceProp, selectProp, foundProp }) => {\n  return(\n    letterProp.map((letter,i,j) =>{\n      return(\n        <img id={`${(selectProp.includes(letter) && faceProp)||foundProp.includes(letter)?'face':''}`} \n        className={letter} key={i} src={require('./399772.jpg')} alt='Silhouette'\n        />\n      )\n    })\n  );\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Card from '../Components/Card';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      listLetters:[],\n      select:[],\n      found:[],\n      face:false,\n      clicked:0\n    }\n  }\n  //In order to add the clicked image to the selection state\n  imageSelection = (event) => {\n    let selected= this.state.select.concat(event.target.className);\n    this.setState({ select: selected });\n    console.log(event.target.className);\n  }\n\n  //Timeout function closing the turn cycle\n  timeout =(time)=> {\n    let delay;\n    function startTimeout(time){\n      let click = this.state.clicked;\n      delay = setTimeout(function(){ click =+ 1 }, time);\n      this.setState({ clicked: click });\n    }\n\n    function stopTimeout(){clearTimeout(delay);\n    }\n  }\n  \n  //Conditions when image clicked\n  handleClick = (event) => {\n    this.setState({ clicked: this.state.clicked +1 });\n\n    // Do nothing when background is clicked\n    if(event.target.className === 'container'){\n      this.setState({ clicked: this.state.clicked });\n    }\n\n    // Rules of the game:\n    // At first click\n\n    if (this.state.clicked <1 ){\n      this.imageSelection(event);\n      this.setState({ face: !this.state.face });\n    }\n\n    // At second click\n\n    const targetChar = event.target.className.charAt(0);\n    const selectChar = this.state.select.map(letter => letter.charAt(0));\n    \n    if (this.state.clicked >=1 && this.state.select.includes(event.target.className)){\n      this.setState({ clicked: this.state.clicked })\n    }   \n      else if (this.state.clicked >= 1 && selectChar.includes(targetChar)){\n        console.log('SAME');\n        this.imageSelection(event);\n        this.setState({ face: true });\n        let pairFound= this.state.found.concat(this.state.select,event.target.className);\n        this.setState({ found: pairFound });\n\n        // timeout condition that closes the turn (cf next step)\n        this.timeout(500)\n      }         \n      else if (this.state.clicked >= 1 && !selectChar.includes(targetChar)){\n        console.log('NOT SAME');\n        this.imageSelection(event);\n        this.setState({ face: true });\n        \n        // timeout condition that closes the turn (cf next step)\n        this.timeout(3000);\n      }\n\n    // At 3rd click - To close turn cycle\n\n    if(this.state.clicked === 2){\n\n      this.setState({ clicked: 0});\n      this.setState({ face: !this.state.face });\n      this.setState({ select: [] });\n    }\n  }\n\n\n  componentWillMount(){\n  //Preparing the list of letters (Shuffle + Random)\n    function shuffle(arr){\n        let i,j,x;\n        for (i =arr.length-1; i>0; i--){\n          j = Math.floor(Math.random()*(i+1));\n          x =arr[i];\n          arr[i] = arr[j];\n          arr[j] = x;\n        }\n        return arr;\n      }\n    const letters = ['A','A2','B','B2','C','C2','D','D2','E','E2','F','F2','G','G2','H','H2','I','I2','J','J2','K','K2'];\n      const i = Math.floor(Math.random()*11);\n      const oddLetters = letters.slice(0,i).concat(letters.slice(i+1, letters.length));\n      const randomOddLetters = shuffle(oddLetters);\n    \n      this.setState({ listLetters:randomOddLetters });\n    }\n    ////////////////////////////////////////////////////////\n\n  render() {\n    const { listLetters, face, select, found } = this.state;\n    return (\n        <div className = 'body'>\n          <div className=\"App\">\n            <h1>PI</h1>\n            <h2 >Puzzle Investigator</h2>\n            <br />\n            <div className='wrapp' onClick={this.handleClick}>\n            <Card letterProp={listLetters} faceProp={face} selectProp={select} foundProp={found}/> \n            </div>\n          </div>\n        </div>\n      )\n  }\n\n}\n\nexport default App;\n\n\n/*at render page:\ndelete random card --- DONE\nwhen first card clicked: ---DONE\n  -change image --- DONE\nwhen second card clicked \n  - change image\nif className first card = className second card then:\n-border green\n- msg (validation)\notherwise \ntimer 3s then change both image back\nwhen only K left + k clicked\n- win message*/\n\n/* \n  1/click on 1 image\n  2/click on 2nd image\n  3/ if image1 === image2 then set id to face permanently\n  -otherwise timer 3 s to face false all + select ''\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}